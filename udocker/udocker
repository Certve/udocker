#!/usr/bin/env python2

# -*- coding: utf-8 -*-
"""
========
udocker
========
Wrapper to execute basic docker containers without using docker.
This tool is a last resort for the execution of docker containers
where docker is unavailable. It only provides a limited set of
functionalities.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
from __future__ import print_function
import sys
import os
from cmd import Cmd

sys.path.append(os.path.dirname(os.path.abspath(sys.argv[0])) + '/../')
from udocker import __version__


class Main(Cmd):
    """Implements most of the command line interface.
    These methods correspond directly to the commands that can
    be invoked via the command line interface.
    """

    def do_images(self, cmdp):
        """
        images: list container images
        images [options]
        -l         :long format
        """
        print('DO Images')

    def do_ps(self, cmdp):
        """
        ps: list containers
        """
        print('DO ps')

    def do_rm(self, cmdp):
        """
        rm: delete a container
        rm <container_id>
        """
        print('DO rm')

    def do_install(self, cmdp):
        """
        install: install udocker and its tools
        install [options]
        --force                    :force reinstall
        --purge                    :remove files (be careful)
        """
        print('DO install')

    def do_version(self, line):
        """
        version: Print version information
        """
        print('udocker version: ', __version__)

    def do_EOF(self, line):
        return True

    def do_quit(self, args):
        """Quits the program."""
        print('Quitting.')
        raise SystemExit


if __name__ == "__main__":
    if len(sys.argv) > 1:
        Main().onecmd(' '.join(sys.argv[1:]))
    else:
        Main().do_help()